LOADL 2
SUBR IOut
LOAD (1) 3[SB]
LOADL 5
SUBR ILss
JUMPIF (0) else1
while_cond2
start_while2
LOAD (1) 0[SB]
LOADL 10
SUBR ILss
JUMPIF (0) end_while2
;(@{k} + @{i})
LOAD (1) 0[SB]
LOAD (1) 3[SB]
SUBR IAdd
LOADA 0[SB]
STOREI (1)
;Declaration de la variable p de type int à la valeur 3
LOADL 3
POP (0) 1
JUMP start_while2
end_while2
;(@{j} + 1)
LOAD (1) 0[SB]
LOADL 1
SUBR IAdd
LOADA 3[SB]
STOREI (1)
;(@{i} * (snd @{p}))
LOAD (1) 3[SB]
LOAD (2) 1[SB]
POP (1) 1
SUBR IMul
LOADA 0[SB]
STOREI (1)
;Declaration de la variable j de type int à la valeur 5
LOADL 5
POP (0) 1
JUMP end_cond1
else1
LOAD (2) 1[SB]
SUBR IOut
LOAD (1) 3[SB]
LOADL 2
SUBR IAdd
LOADL 10
SUBR IGtr
JUMPIF (0) else3
LOADL 0
SUBR IOut
POP (0) 0
JUMP end_cond3
else3
POP (0) 0
end_cond3
POP (0) 0
end_cond1
;Declaration de la variable k de type int à la valeur (fst @{p})
LOAD (2) 1[SB]
POP (0) 1
;Declaration de la sequence
;Declaration de la variable p de type < int, int> à la valeur { 3 ,4 }
LOADL 3
LOADL 4
;Declaration de la variable i de type int à la valeur 1
LOADL 1
POP (0) 4
HALT

